(function(s,t){typeof exports=="object"&&typeof module<"u"?module.exports=t():typeof define=="function"&&define.amd?define(t):(s=typeof globalThis<"u"?globalThis:s||self,s["extendable-calculator"]=t())})(this,function(){"use strict";var p=Object.defineProperty;var a=(s,t,r)=>t in s?p(s,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[t]=r;var u=(s,t,r)=>(a(s,typeof t!="symbol"?t+"":t,r),r);class s{constructor(){u(this,"_operations",[])}addOperation(r,i,o=3){this._operations.push({keyWord:r,cb:i,priority:o})}calc(r){if(r=this.extractParentheses(r),this.statementHasOnlyNumbers(r))return parseFloat(r);let i,o=-1,e=-1;for(let n=0;n<r.length;++n){let l=this.getOperation(r,n);if((l&&!i||l&&i.priority<l.priority)&&(i=l,o=n,e=n+=i.keyWord.length,i.priority===3))break}if(!i||o===-1||e===-1)throw new Error("No registered operators found");return i.cb(this.calc(r.substring(0,o).trim()),this.calc(r.substring(e).trim()))}getOperation(r,i){let o=0,e;for(const n of this._operations)n.keyWord.length>o&&r.startsWith(n.keyWord,i)&&(o=n.keyWord.length,e=n);return e}statementHasOnlyNumbers(r){return r=r.trim(),parseFloat(r).toString()===r}extractParentheses(r){let i=0,o=-1;for(let e=0;e<r.length;++e)r[e]==="("&&i++===0&&(o=e),r[e]===")"&&--i===0&&(r=r.substring(0,o)+this.calc(r.substring(o+1,e)).toString()+r.substring(e+1),e=o);if(i!==0)throw Error("Parentheses must have pair");return r}}return s});
